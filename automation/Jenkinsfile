def common_funcs

pipeline {
    agent { label 'build2' }
    environment {
        LOG_JUNIT_RESULTS = 'true'
    }
    stages {
        stage('Init') {
            steps {
                script {
                    common_funcs = load ("automation/test_common.groovy");
                }
            }
        }
        stage('Setup resources') {
            steps {
                script {
                    common_funcs.setup_resources()
                }
            }
        }
        // First build can end up doing some patching of Tensorflow
        // so run one build sequentially to start with
        stage('Build HP GCC Release') {
            steps {
                script {
                    common_funcs.build_hp("Release", "gcc", "AE722F80F55D5");
                }
            }
        }
        // Remaining builds can be parallel
        stage('More builds') {
            parallel {
                stage('Build HP GCC Debug E7') {
                    steps {
                        script {
                            common_funcs.build_hp("Debug", "gcc", "AE722F80F55D5");
                        }
                    }
                }
                stage('Build HE-TCM GCC Release') {
                    steps {
                        script {
                            common_funcs.build_he_tcm("Release", "gcc", "AE722F80F55D5");
                        }
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: '*/bin/*', fingerprint: true
                            archiveArtifacts artifacts: '*/bin/sectors/**/*.bin', fingerprint: true
                            stash name: "test_build_gnu_kws_he_release", includes: "build_gcc_he_tcm_release_ae722f80f55d5/bin/sectors/alif_kws/mram.bin"
                        }
                    }
                }
                stage('Build HE-TCM GCC Debug E7') {
                    steps {
                        script {
                            common_funcs.build_he_tcm("Debug", "gcc", "AE722F80F55D5");
                        }
                    }
                }
            }
        }
        stage('Test KWS HE Release E7') {
            agent { label 'E7' }
            steps {
                unstash name: "test_build_gnu_kws_he_release"
                script {
                    try {
                    common_funcs.flash_and_run_pytest("alif_kws_he.json", "build_gcc_he_tcm_release_ae722f80f55d5/bin/sectors/alif_kws", "mram.bin", "ethos-u-alif_kws.bin");
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        stageResult: 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'alif_kws_he.json', fingerprint: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: '*/junit/*', fingerprint: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'pytest/pytest-logs/pytest-embedded/**', fingerprint: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'pytest/html-report-ethos-u-alif_kws.bin.html', fingerprint: false, allowEmptyArchive: true
                    junit skipPublishingChecks: true, testResults: 'pytest/junit/junit-report-ethos-u-alif_kws.bin.xml'
                }
                cleanup {
                    cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
        }
    }
}
